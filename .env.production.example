# Production Environment Configuration
# Copy this file to .env.production and update with your actual values

# ====================================
# PostgreSQL Database Configuration
# ====================================
POSTGRES_USER=postgres
POSTGRES_PASSWORD=CHANGE_THIS_TO_A_SECURE_PASSWORD
POSTGRES_DB=cash_money

# ====================================
# Application Configuration
# ====================================
# Port the application will listen on (mapped from container)
APP_PORT=3000

# Node environment
NODE_ENV=production

# ====================================
# Security Recommendations
# ====================================
# 1. Generate a strong password for POSTGRES_PASSWORD:
#    - Minimum 20 characters
#    - Mix of uppercase, lowercase, numbers, and symbols
#    - Example generation: openssl rand -base64 32
#
# 2. Consider using Docker secrets for sensitive data:
#    https://docs.docker.com/engine/swarm/secrets/
#
# 3. Enable SSL/TLS for database connections in production
#
# 4. Set up regular automated backups of the postgres_data volume
#
# 5. Configure firewall rules on your Synology to restrict access

# ====================================
# Synology Deployment Notes
# ====================================
# 1. Place this file as .env.production on your Synology
# 2. Update POSTGRES_PASSWORD with a secure password
# 3. Run: docker compose -f docker-compose.production.yml --env-file .env.production up -d
# 4. Monitor logs: docker compose -f docker-compose.production.yml logs -f
# 5. Access the app at: http://your-synology-ip:3000
